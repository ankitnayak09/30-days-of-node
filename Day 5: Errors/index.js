// Errors => issue that arises unexpectedly and cause our program to not function properly, or halt its execution.

// error object doesnot specify any circumstance under which the error occured but it caputures a stack trace which details the point in the code where the error was instantiated and may provide error description.
// All Errors generated by node are either instantiated from error class or are instance of error class.

// Properties
// 1) new Error(message): sets error.message property to the text specified
const err1 = new Error("This is an error message");

// 2) error.message: shows description of error
//here error.message property is set to the string provided.
const err2 = new Error("This is an error message");
console.error(err2.message);
//Output will be :
//This is an error message

// 3) error.code: identify type of error

// 4) error.stack: returns string in which details are provided about where in the code the error was instantiated.

// 5) Error.captureStackTrace: create a .stack property on the target object which returns the location in the code where the method was ccalled. Returns data in the form of string.

// 6) Error.stackTraceLimit: specified no of stack frames captured by stack trace. default value is 10. is negative then stack trace wont return any frames.

// Error Propagation and Interception

// 1) Sync. APIs: uses blocking method that doesn't accept a callback func and uses throw to report errors.
// 2) Async APIs: Errors can be routed to the object's error event if an async event is called on an object.
connection.on("error", (err) => {
	//This is the error event which is used
	//to handle the error properly
	console.error(err);
});

// Asynchronous methods in node.js accepts an error object passed as the first argument given that method should accept callbacks. These errors are handled in the following way :
//Reading a File Asynchronously using nodejs
//if any error occurs such as file not found
//we don't have permissions , etc
//then an err message will be console.
//otherwise data will be printed
var fs = require("fs");
fs.readFile("message.txt", (err, data) => {
	if (err) return console.error(err);

	console.log("Content :  " + data);
});
